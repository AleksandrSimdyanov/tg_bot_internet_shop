import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from app.handlers import user_handler


class TestUserHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–∫–∞–º–∏"""

    @pytest.mark.asyncio
    async def test_start_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_message = AsyncMock()
        mock_message.from_user.id = 1

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_user
        with patch.object(user_handler.rq, 'add_user', AsyncMock()) as mock_add_user:
            # –ú–æ–∫–∞–µ–º answer
            mock_message.answer = AsyncMock()

            await user_handler.start_cmd(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_add_user.assert_called_once_with(1)
            mock_message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_catalog_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        mock_message = AsyncMock()
        mock_message.text = "–ö–∞—Ç–∞–ª–æ–≥ üóÇ"

        # –ú–æ–∫–∞–µ–º types_kb
        mock_keyboard = MagicMock()
        with patch.object(user_handler.kb, 'types_kb', AsyncMock(return_value=mock_keyboard)):
            mock_message.answer = AsyncMock()

            await user_handler.send_catalog(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            user_handler.kb.types_kb.assert_called_once_with(back=True)
            mock_message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_show_product_not_found(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        # –ú–æ–∫–∞–µ–º callback
        mock_callback = AsyncMock()
        mock_callback.data = "product_999"

        # –ú–æ–∫–∞–µ–º get_product_by_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
        with patch.object(user_handler.rq, 'get_product_by_id', AsyncMock(return_value=None)):
            mock_callback.answer = AsyncMock()

            await user_handler.show_product(mock_callback)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω answer —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            mock_callback.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.answer –ù–ï –≤—ã–∑—ã–≤–∞–ª—Å—è (—Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)
            assert not mock_callback.message.answer.called

    @pytest.mark.asyncio
    async def test_show_product_found(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        # –ú–æ–∫–∞–µ–º callback
        mock_callback = AsyncMock()
        mock_callback.data = "product_1"

        # –ú–æ–∫–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        mock_product = MagicMock()
        mock_product.id = 1
        mock_product.name = "Test Product"
        mock_product.info = "Test Info"
        mock_product.photo = "test.jpg"
        mock_product.type_id = 1

        mock_type = MagicMock()
        mock_type.type = "test"

        with patch.object(user_handler.rq, 'get_product_by_id', AsyncMock(return_value=mock_product)):
            with patch.object(user_handler.rq, 'get_type_by_id', AsyncMock(return_value=mock_type)):
                with patch.object(user_handler, 'FSInputFile', MagicMock()):
                    with patch.object(user_handler.kb, 'buy_kb', AsyncMock(return_value=MagicMock())):
                        mock_callback.message.answer_photo = AsyncMock()
                        mock_callback.answer = AsyncMock()

                        await user_handler.show_product(mock_callback)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
                        mock_callback.message.answer_photo.assert_called_once()
                        mock_callback.answer.assert_called_once()


class TestHandlerErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö"""

    @pytest.mark.asyncio
    async def test_handler_exception_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö"""
        mock_message = AsyncMock()
        mock_message.text = "–ö–∞—Ç–∞–ª–æ–≥ üóÇ"

        # –ú–æ–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ types_kb
        with patch.object(user_handler.kb, 'types_kb', AsyncMock(side_effect=Exception("Test error"))):
            mock_message.answer = AsyncMock()

            # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
            try:
                await user_handler.send_catalog(mock_message)
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                assert True
            except Exception as e:
                # –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–æ—Å–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                assert str(e) == "Test error"