from aiogram.types import (InlineKeyboardButton,
                           InlineKeyboardMarkup,
                           ReplyKeyboardMarkup,
                           KeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import app.database.requests as rq

start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üóÇ"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõç")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑—ã üì¶"), KeyboardButton(text="–ü–æ–º–æ—â—å üÜò")]
    ], resize_keyboard=True
)


async def types_kb(back=True):
    builder = InlineKeyboardBuilder()
    try:
        types = await rq.get_types()
        for type in types:
            button = InlineKeyboardButton(text=type.ru_name, callback_data=f"type_{type.id}")
            builder.row(button)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        print(f"Error getting types: {e}")

    if back:
        builder.row(InlineKeyboardButton(text="‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_menu"))
    return builder.as_markup()


async def products_kb(type_id, back=True):
    builder = InlineKeyboardBuilder()
    try:
        products = await rq.get_products(type_id)
        for product in products:
            button = InlineKeyboardButton(text=product.name, callback_data=f"product_{product.id}")
            builder.row(button)
    except Exception as e:
        print(f"Error getting products: {e}")

    if back:
        builder.row(InlineKeyboardButton(text="‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_section"))
    return builder.as_markup()


async def buy_kb(product_id):
    try:
        product = await rq.get_product_by_id(product_id)
        if product:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å-1—à—Ç-{product.price} —Ä—É–±–ª–µ–π", callback_data=f"indicate_{product.id}")]
                ]
            )
            return kb
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            return InlineKeyboardMarkup(inline_keyboard=[])
    except Exception as e:
        print(f"Error creating buy keyboard: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardMarkup(inline_keyboard=[])


async def size_kb(product_id):
    builder = InlineKeyboardBuilder()
    product = await rq.get_product_by_id(product_id)
    sizes = product.size.split(", ")
    for size in sizes:
        button = InlineKeyboardButton(text=size, callback_data=f"buy_{product.id}_{size}")
        builder.add(button)
    builder.row(InlineKeyboardButton(text="‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_section"))
    return builder.as_markup()

async def new_buy_kb(product_id, us_id, quantity):
    product = await rq.get_product_by_id(product_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å-{product.price} —Ä—É–±–ª–µ–π", callback_data=f"buy_{product.id}")],
            [InlineKeyboardButton(text="‚ûñ", callback_data=f"minus_{product_id}"), InlineKeyboardButton(text=f"{quantity} —à—Ç.", callback_data="count"), InlineKeyboardButton(text="‚ûï", callback_data=f"plus_{product_id}")],
            [InlineKeyboardButton(text=f"–ö–æ—Ä–∑–∏–Ω–∞ ({await rq.get_sum_cart_by_user_id(us_id)} —Ä—É–±–ª–µ–π)", callback_data=f"cart_{us_id}")],
        ]
    )
    return kb

make_order_kb =  InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order")]
        ]
    )
pay_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–ë–ü")],
        [KeyboardButton(text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")],
        [KeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µ")]
    ], resize_keyboard=True
)

phone_number_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]
    ], resize_keyboard=True
)

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True
)

async def order_kb(orders):
    builder = InlineKeyboardBuilder()
    for order in orders:
        builder.add(InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ {order.id} - {order.status}", callback_data=f"order_{order.id}"))
        builder.adjust(1)
    return builder.as_markup()

async def appeal_kb(appeal_id):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"appeal_{appeal_id}")]
        ]
    )
    return kb


admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")]
    ],
    resize_keyboard=True
)


async def admin_types_kb(action: str = "view"):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞
    action: "add", "delete", "edit", "view"
    """
    builder = InlineKeyboardBuilder()
    types = await rq.get_types()

    for type in types:
        callback_data = f"admin_{action}_type_{type.id}"
        button = InlineKeyboardButton(text=type.ru_name, callback_data=callback_data)
        builder.row(button)

    builder.row(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin_back"))
    return builder.as_markup()


async def admin_products_kb(type_id: int, action: str = "view"):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
    action: "delete", "edit"
    """
    builder = InlineKeyboardBuilder()
    products = await rq.get_products(type_id)

    for product in products:
        callback_data = f"admin_{action}_product_{product.id}"
        button = InlineKeyboardButton(text=product.name, callback_data=callback_data)
        builder.row(button)

    builder.row(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_back_types"))
    return builder.as_markup()


async def admin_edit_product_kb(product_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    buttons = [
        ("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", f"admin_edit_name_{product_id}"),
        ("üìù –û–ø–∏—Å–∞–Ω–∏–µ", f"admin_edit_info_{product_id}"),
        ("üí∞ –¶–µ–Ω–∞", f"admin_edit_price_{product_id}"),
        ("üñºÔ∏è –§–æ—Ç–æ", f"admin_edit_photo_{product_id}"),
        ("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", f"admin_edit_type_{product_id}"),
        ("‚úÖ –ì–æ—Ç–æ–≤–æ", f"admin_edit_done_{product_id}")
    ]

    for text, callback_data in buttons:
        builder.add(InlineKeyboardButton(text=text, callback_data=callback_data))

    builder.adjust(2)
    return builder.as_markup()


async def admin_edit_field_kb(product_id: int, field: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_{field}_{product_id}"),
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"admin_edit_back_{product_id}")
    )

    return builder.as_markup()


async def admin_confirm_delete_kb(product_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"admin_confirm_delete_{product_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_cancel_delete")
    )

    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
admin_after_action_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="admin_edit_more")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="admin_back_menu")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
admin_cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_cancel")]
    ]
)


async def admin_edit_types_kb(product_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    types = await rq.get_types()

    for type in types:
        callback_data = f"admin_change_type_{product_id}_{type.id}"
        button = InlineKeyboardButton(text=type.ru_name, callback_data=callback_data)
        builder.row(button)

    builder.row(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"admin_edit_back_{product_id}"))
    return builder.as_markup()