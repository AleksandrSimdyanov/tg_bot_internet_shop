from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import app.database.requests as rq
import keyboards as kb

admin_products_router = Router()


class AddProduct(StatesGroup):
    type = State()
    name = State()
    info = State()
    price = State()
    photo = State()


class EditProduct(StatesGroup):
    field = State()
    value = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@admin_products_router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id == 835168779:  # –í–∞—à ID
        await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_kb)
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_products_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("add"))
    await state.set_state(AddProduct.type)


@admin_products_router.callback_query(AddProduct.type, F.data.startswith("admin_add_type_"))
async def add_product_type(call: CallbackQuery, state: FSMContext):
    type_id = int(call.data.split("_")[3])
    type_obj = await rq.get_type_by_id(type_id)
    await state.update_data(type_id=type_id, type_name=type_obj.ru_name)
    await call.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {type_obj.ru_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                              reply_markup=kb.admin_cancel_kb)
    await state.set_state(AddProduct.name)
    await call.answer()


@admin_products_router.message(AddProduct.name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb.admin_cancel_kb)
    await state.set_state(AddProduct.info)


@admin_products_router.message(AddProduct.info)
async def add_product_info(message: Message, state: FSMContext):
    await state.update_data(info=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb.admin_cancel_kb)
    await state.set_state(AddProduct.price)


@admin_products_router.message(AddProduct.price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ file_id:", reply_markup=kb.admin_cancel_kb)
        await state.set_state(AddProduct.photo)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")


@admin_products_router.message(AddProduct.photo, F.photo)
async def add_product_photo_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()

    await rq.add_product(
        name=data['name'],
        info=data['info'],
        photo=file_id,
        price=data['price'],
        type_id=data['type_id']
    )

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_after_add_kb)
    await state.clear()


@admin_products_router.message(AddProduct.photo)
async def add_product_photo_text(message: Message, state: FSMContext):
    photo = message.text
    data = await state.get_data()

    await rq.add_product(
        name=data['name'],
        info=data['info'],
        photo=photo,
        price=data['price'],
        type_id=data['type_id']
    )

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_after_add_kb)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_products_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("delete"))


@admin_products_router.callback_query(F.data.startswith("admin_delete_type_"))
async def delete_product_category(call: CallbackQuery):
    type_id = int(call.data.split("_")[3])
    products = await rq.get_products(type_id)

    if not products:
        await call.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                              reply_markup=await kb.admin_products_kb(type_id, "delete"))
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_delete_product_"))
async def delete_product_confirm(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_by_id(product_id)

    await call.message.answer(
        f"‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?\n\n"
        f"üì¶ {product.name}\n"
        f"üí∞ {product.price} —Ä—É–±.\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=await kb.admin_confirm_delete_kb(product_id)
    )
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def delete_product_final(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    success = await rq.delete_product(product_id)

    if success:
        await call.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_cancel_delete")
async def cancel_delete(call: CallbackQuery):
    await call.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
@admin_products_router.callback_query(F.data == "admin_cancel")
async def admin_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb)
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery):
    await call.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_kb)
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_back_types")
async def admin_back_types(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("delete"))
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_add_more")
async def admin_add_more(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("add"))
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_back_menu")
async def admin_back_menu(call: CallbackQuery):
    await call.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_kb)
    await call.answer()


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê
@admin_products_router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def edit_product_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("edit"))


@admin_products_router.callback_query(F.data.startswith("admin_edit_type_"))
async def edit_product_category(call: CallbackQuery):
    type_id = int(call.data.split("_")[3])
    products = await rq.get_products(type_id)

    if not products:
        await call.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                              reply_markup=await kb.admin_products_kb(type_id, "edit"))
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_product_"))
async def edit_product_select(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_details(product_id)

    if not product:
        await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    message_text = (
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.info}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
        f"üñºÔ∏è –§–æ—Ç–æ: {'üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if product.photo else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    await call.message.answer(message_text, reply_markup=await kb.admin_edit_product_kb(product_id))
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_name_"))
async def edit_product_name_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_by_id(product_id)

    await state.update_data(product_id=product_id, current_field="name")
    await call.message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                              reply_markup=kb.admin_cancel_kb)
    await state.set_state(EditProduct.value)
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_info_"))
async def edit_product_info_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_by_id(product_id)

    await state.update_data(product_id=product_id, current_field="info")
    await call.message.answer(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {product.info}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                              reply_markup=kb.admin_cancel_kb)
    await state.set_state(EditProduct.value)
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_price_"))
async def edit_product_price_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_by_id(product_id)

    await state.update_data(product_id=product_id, current_field="price")
    await call.message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product.price} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
                              reply_markup=kb.admin_cancel_kb)
    await state.set_state(EditProduct.value)
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_photo_"))
async def edit_product_photo_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split("_")[3])

    await state.update_data(product_id=product_id, current_field="photo")
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ file_id:", reply_markup=kb.admin_cancel_kb)
    await state.set_state(EditProduct.value)
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_type_"))
async def edit_product_type_start(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_details(product_id)

    await call.message.answer(
        f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {product.type.ru_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=await kb.admin_edit_types_kb(product_id)
    )
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_change_type_"))
async def edit_product_type_change(call: CallbackQuery):
    data_parts = call.data.split("_")
    product_id = int(data_parts[3])
    new_type_id = int(data_parts[4])

    success = await rq.update_product(product_id, type_id=new_type_id)

    if success:
        product = await rq.get_product_details(product_id)
        new_type = await rq.get_type_by_id(new_type_id)
        await call.message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_type.ru_name}")
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await call.answer()


@admin_products_router.message(EditProduct.value, F.photo)
async def edit_product_photo_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    field = data['current_field']

    file_id = message.photo[-1].file_id
    success = await rq.update_product(product_id, photo=file_id)

    if success:
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.admin_after_action_kb)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")

    await state.clear()


@admin_products_router.message(EditProduct.value)
async def edit_product_value(message: Message, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    field = data['current_field']
    value = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ü–µ–Ω—ã
    if field == "price":
        try:
            value = int(value)
        except ValueError:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

    update_data = {field: value}
    success = await rq.update_product(product_id, **update_data)

    if success:
        field_names = {
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "info": "–æ–ø–∏—Å–∞–Ω–∏–µ",
            "price": "—Ü–µ–Ω–∞",
            "photo": "—Ñ–æ—Ç–æ"
        }
        await message.answer(f"‚úÖ {field_names[field].capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.admin_after_action_kb)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

    await state.clear()


@admin_products_router.callback_query(F.data.startswith("admin_edit_done_"))
async def edit_product_done(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_details(product_id)

    message_text = (
        f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üì¶ {product.name}\n"
        f"üìù {product.info}\n"
        f"üí∞ {product.price} —Ä—É–±.\n"
        f"üñºÔ∏è {'üì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if product.photo else '‚ùå –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    await call.message.answer(message_text, reply_markup=kb.admin_after_action_kb)
    await call.answer()


@admin_products_router.callback_query(F.data.startswith("admin_edit_back_"))
async def edit_product_back(call: CallbackQuery):
    product_id = int(call.data.split("_")[3])
    product = await rq.get_product_details(product_id)

    message_text = (
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.info}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.type.ru_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    await call.message.answer(message_text, reply_markup=await kb.admin_edit_product_kb(product_id))
    await call.answer()


@admin_products_router.callback_query(F.data == "admin_edit_more")
async def admin_edit_more(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.admin_types_kb("edit"))
    await call.answer()