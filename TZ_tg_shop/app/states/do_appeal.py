from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.requests import add_question
import keyboards

do_appeal_router = Router()

class Question(StatesGroup):
    asking_for_phone = State()
    question = State()
    phone_number = State()

@do_appeal_router.message(F.text == "–ü–æ–º–æ—â—å üÜò")
async def show_question(message: Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫\n"
                         "–ú—ã –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.")
    await state.set_state(Question.question)

@do_appeal_router.message(Question.question)
async def do_question(message: Message, state: FSMContext):
    question = message.text
    await state.update_data(question=question)
    await state.set_state(Question.asking_for_phone)
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã?", reply_markup=keyboards.yes_no_kb)

@do_appeal_router.message(Question.asking_for_phone, F.text == "–î–∞")
async def get_contact_yes(message: Message, state: FSMContext):
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboards.phone_number_kb)
    await state.set_state(Question.phone_number)

@do_appeal_router.message(Question.asking_for_phone, F.text == "–ù–µ—Ç")
async def get_contact_no(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    await add_question(user_id=user_id,
                       question=data["question"],
                       status="new")
    await state.clear()
    await message.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞!", reply_markup=keyboards.start_kb)

@do_appeal_router.message(Question.phone_number)
async def get_contact(message: Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.contact.phone_number
    data = await state.get_data()
    await add_question(user_id=user_id,
                       phone_number=phone,
                       question=data["question"],
                       status="new")
    await state.clear()
    await message.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞!", reply_markup=keyboards.start_kb)